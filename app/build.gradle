def appVersionName() {
    return "0.4.1";
}

def getAppName() {
    return "PrimeStation One Control";
}

/*
* Android SDK on build system must have the following installed:
*
* Java 1.8 JDK8, set home in JAVA_HOME and JAVA_HOME8
* Java 1.7 JDK7, set home in JAVA_HOME7 (Only required if you want to run tests!  If not, set JAVA_HOME7 to the same as JAVA_HOME8)
*
* Android SDK ('brew install android' to install on OSX)
*
* in location pointed to by system environment variable ANDROID_HOME: (also, if ANDROID_HOME is not set, set it!)
* In Android SDK Manager ('android sdk'):
* -Tools/Android SDK Tools 25.0.10
* -Tools/Android SDK Platform Tools 23.1.0
* -Tools/Android SDK Build Tools 23.0.2
* -Android 6.0/SDK Platform API 23r3
* -Extras/Local Maven repository for Support Libraries 28.0.0
* -Extras/Android Support Library 23.2.1
* -Extras/Google Play Services 29

* */

def debugPackageSuffix = ".debug"

apply from: '../gradle/jacoco-unit.gradle'

//Plugin order is VERY IMPORTANT to successful compilation.  Keep Realm second, Retrolambda second to last, and APT last.
//So far, this is what we have determined is required.

apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

//apply from: '../gradle/retrolambda.gradle'

def getSimpleName(def fqClassname) {
    return fqClassname.substring(fqClassname.lastIndexOf('.') + 1)
}

android {
    repositories {
        //NOTE: These are searched for requested dependencies in order... best to have smaller / faster repos up top and the larger / slower repos as fallbacks

        // Workaround for issue where android SDK repo is not automatically detected by Gradle:
        // https://code.google.com/p/android/issues/detail?id=69270
        def androidHome = System.getenv("ANDROID_HOME")
        maven { url "$androidHome/extras/android/m2repository/" }

        def userHome = System.getenv("HOME")
        maven { url "$userHome/m2repository/" } //For a custom user-maintained local repo in your user folder under ~/m2repository following standard Maven artifact conventions for folder structure - see https://repo.nikedev.com/artifactory for examples - enables working off-site with new dependencies

        apply from: file('../gradle/repositories-standard.gradle')
    }

    //noinspection GroovyAssignabilityCheck
    compileSdkVersion targetAndroidSdkVersion

    //noinspection GroovyAssignabilityCheck
    buildToolsVersion androidBuildToolsVersion

    dexOptions {
        jumboMode = false
//        javaMaxHeapSize "2g" //Otherwise we run out of memory when building including the test coverage reports.http://stackoverflow.com/a/33854389/3686125
    }

/*
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
*/
    defaultConfig {
        applicationId "com.chrisprime.primestationonecontrol"

        //noinspection GroovyAssignabilityCheck
        minSdkVersion minAndroidSdkVersion

        //noinspection GroovyAssignabilityCheck
        targetSdkVersion targetAndroidSdkVersion

        versionName getAppVersionName()

        versionCode numGitCommits()
//        versionCode dateVersionCode()

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        def testSuiteClass = "$applicationId.${whichTestSuite}"
        testInstrumentationRunnerArgument('class', testSuiteClass)
        print("=====================================================================================\n\n" +
                "====>You may pass in the following parameters to the gradle command line to indicate which test suite or test class && optional test method you would like to run:\n" +
                "(Below parameter will work with both connectedAndroidTest and spoon tasks, specify ONLY a test suite here -- PrimeTestSuite is the default)\n\n" +
                "          -PtestSuite=PrimeTestSuite\n\n" +
                "(Below parameter will only work with the spoon task, and could indicate either a test class or a test suite class)\n\n" +
                "          -PspoonClassName=packagename.TestClassName\n\n" +
                "(Below parameter will only work with the spoon task, and indicates a specific method inside the provided spoonClassName above)\n\n" +
                "          -PspoonMethodName=testMethodName\n\n" +
                "=====================================================================================")
        println("\nIf automation tests have been requested, the test suite that will be run is: ${testSuiteClass}\n")
        manifestPlaceholders = [applicationTheme: "@style/AppTheme"]
        multiDexEnabled true

        jackOptions {
            enabled false
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false

            //TODO: We might be able to create a project submodule for this library and automatically utilize the ones we care about, but this might be more problematic than just manually updating the files and checking into our project when necessary
            //Now utilizing modular, separated proguard rule files - many of which are kept more or less up-to-date here: https://github.com/krschultz/android-proguard-snippets
            FileCollection proGuardFolderListing = files {
                file('./proguard').listFiles(new ProguardFileFilter())
            }
            proGuardFolderListing.each {
                println "Proguard file located and added: " + it
            }
            proguardFiles(proGuardFolderListing.asList().toArray())
        }
        debug {
            minifyEnabled false
            applicationIdSuffix debugPackageSuffix
            versionNameSuffix "-SNAPSHOT"
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'NOTICE.txt'
        exclude 'NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude '.README'
        exclude '.readme'
        exclude '*readme*'

        //Workaround for espresso compilation issues with gradle android build tools 1.5
        //http://stackoverflow.com/questions/33800924/espresso-web-import-causes-duplicatefileexception
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        //issue with butterknife and realm
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

class ProguardFileFilter implements FilenameFilter {
    public boolean accept(File f, String filename) {
        //Yes, it is Proguard standard practice to have the proguard-android file with a .txt extension instead of a .pro extension.  This is how it is in the proguard-snippets repo, so we should keep it the same to avoid confusion.
        return filename.endsWith("txt") || filename.endsWith("pro")
    }
}

def getAppVersionName() {
    def versionName = appVersionName();
    def numCommits = numGitCommits();
    def appName = getAppName();
    println "\nBuilding $appName app v$versionName (version code $numCommits) for Android\n"
    return versionName
}

int dateVersionCode() {
    def dateStampInt = Integer.parseInt(new Date().format('yyyyMMddHH'))
    println("\nDatestamp-based version code generated: $dateStampInt\n")
    return dateStampInt
}

int numGitCommits() {
    //noinspection GroovyUnusedAssignment
    def pwd = "pwd".execute().text
    def command = "git --git-dir=$rootDir/.git --work-tree=$rootDir rev-list HEAD --first-parent --count"
    def process = command.execute()
    def result = process.text
//    println "numGitCommits from projectDir: $rootDir, command:\n$command\n$result"    //Leaving this in as it helps debug gradle build version issues
    def gitVersionInteger = result.isInteger() ? result.toInteger() : 0
    //Fallback to version code 0 to allow certain stubborn Android Studio edge cases to still Gradle Sync the app successfully on the first go
    if (gitVersionInteger < 1) {
        println "numGitCommits WARNING: Unable to determine version code, falling back on 0!  If this happens only in Android Studio, but not from the command line, have you recently updated XCode and have you run it yet to accept the new license agreement from Apple?"
    }
    return gitVersionInteger
}

kapt {
    generateStubs = true
}

dependencies {
    //noinspection GradleDependency
    compile "com.android.support:design:${androidSupportLibraryVersion}"
    //noinspection GradleDependency
    compile "com.android.support:cardview-v7:${androidSupportLibraryVersion}"
    //noinspection GradleDependency
    compile "com.android.support:recyclerview-v7:${androidSupportLibraryVersion}"
    //noinspection GradleDependency
    compile "com.android.support:preference-v7:${androidSupportLibraryVersion}"

    //noinspection GroovyAssignabilityCheck
    configurations.all {
        // Enforce latest android support annotations for all dependencies
        resolutionStrategy.force "com.android.support:support-annotations:${androidSupportLibraryVersion}"

        //This subdependency is included in the Android SDK and can easily cause conflicts
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    //Below is for consumer-friendly and obvious Android device names so we can easily identify which device did what in analytics and crashlogs
    //https://github.com/jaredrummler/AndroidDeviceNames
    compile 'com.jaredrummler:android-device-names:1.0.8'

    compile 'com.squareup.picasso:picasso:2.5.2'

    compile 'com.jcraft:jsch:0.1.54'

    compile 'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0'

    //ReactiveX Dependencies:
    compile 'io.reactivex:rxjava:1.1.2'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.ogaclejapan:rxbinding:1.2.0'
    //https://github.com/ReactiveX/RxAndroid -- Requires SDK 14, disabled for now
//    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    //noinspection GradleDynamicVersion
    compile 'com.artemzin.rxjava:proguard-rules:1.1.+'
    // And ProGuard rules for RxJava!

    //TODO: Upgrade to Butterknife 8+, which has moved away from @Bind annotations in favor of @BindView and @BindViews among others.  Attempts to simply convert these calls result in our app crashing upon startup so more work is needed.
//    compile 'com.jakewharton:butterknife:7.0.1'

    //We are stuck on Timber 3.x if we want to maintain a minimum SDK of 10.  Timber 4.x requires SDK 15
    compile 'com.jakewharton.timber:timber:3.1.0'

    //TODO: Remove GSON in favor of LoganSquare...?
    compile 'com.google.code.gson:gson:2.4'

//    apt 'com.bluelinelabs:logansquare-compiler:1.3.7'
    compile 'com.bluelinelabs:logansquare:1.3.7'

    compile('com.afollestad.material-dialogs:core:0.8.5.9@aar') {
        // https://github.com/afollestad/material-dialogs
        transitive = true
    }

    // Needed for dagger 2
    compile 'com.google.dagger:dagger:2.6.1'
    provided 'com.google.dagger:dagger-compiler:2.6.1'
//    androidTestApt 'com.google.dagger:dagger-compiler:2.6.1'
    kapt 'com.google.dagger:dagger-compiler:2.6.1'

    //Event bus:
    compile 'org.greenrobot:eventbus:3.0.0'
    //TODO: Remove otto in favor of eventbus
    compile 'com.squareup:otto:1.3.8'


    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    // Needed specifically for annotations in Java 1.6
//    compile 'org.glassfish:javax.annotation:10.0-b28'

    //Velodrome requires SDK 14, so disabled for now
//    compile 'com.levelmoney.velodrome:velodrome:1.0'

    // http://parceler.org/
    compile 'org.parceler:parceler-api:1.1.6'
//    apt 'org.parceler:parceler:1.1.6'
    kapt 'org.parceler:parceler:1.1.6'

/*
    //TODO: Try Robolectric 3.1.5+ once released, currently 3.1.0 - 3.1.4 is incompatible with Powermock - causes issues with xstream project parsing during Realm unit tests https://github.com/robolectric/robolectric/issues/1389
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.robolectric:shadows-support-v4:3.0'
    testCompile 'org.robolectric:shadows-multidex:3.0'
    //TODO: Try powermock 1.6.6+ once released, currently 1.6.5 breaks our fragment unit tests complaining about SnkrsApplication not being prepared for the test
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    testCompile 'org.powermock:powermock-classloading-xstream:1.6.4'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.4.1'
    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.4.1'
*/

    testCompile 'junit:junit-dep:4.8.2'

    //Below adds JSONObject and others to unit tests, usually could not access json objects as it is in android jar and usually requires instrumentation testing:  http://stackoverflow.com/a/29684901/3686125
    testCompile 'org.json:json:20140107'

    androidTestCompile 'com.android.support.test:runner:0.5'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.5'
    // Set this dependency to build and run UI Automator tests
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    // --------------------------------------------------------------------
    //For espresso web view (NOTE: ALSO includes espresso-core!  No need to include both since gradle build tools 1.5)
    androidTestCompile 'com.android.support.test.espresso:espresso-web:2.2.2'
    //-----------------------------------------------------------
    //Below test dependency requires some exclude statements to be able to test with RecyclerViews
    //See http://stackoverflow.com/a/30715011/3686125
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2') {
        exclude module: 'appcompat'
        exclude module: 'support-v4'
        exclude module: 'appcompat-v7'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }

    androidTestCompile ('com.android.support.test.espresso:espresso-core:2.0'){
        exclude group: 'javax.inject'
    }

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

String java8 = getJavaVersion(8)
String java7 = getJavaVersion(7)

String getJavaVersion(Integer v) {
    def retrievedJavaVersionHome;
    retrievedJavaVersionHome = System.getenv("JAVA$v" + "_HOME")
    if (retrievedJavaVersionHome == null || retrievedJavaVersionHome.size() < 1) {
        def sout = new StringBuffer()
        def proc = "/usr/libexec/java_home -v 1.$v".execute()
        proc.consumeProcessOutput(sout, new StringBuffer())
        proc.waitForOrKill(1000)
        retrievedJavaVersionHome = sout.toString().replace("\n", "").replace("\r", "")
    }
    println "getJavaVersion($v" + ") has retrieved $retrievedJavaVersionHome"
    return retrievedJavaVersionHome
}

apply from: '../gradle/spoon.gradle'
