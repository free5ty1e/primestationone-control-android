//apply plugin: 'jacoco'  //Required for gradle to generate automation / instrumentation / UI test coverage report as well as required to enable the below unit testing jacoco

def snkrsPackageDir = "com/chrisprime/primestationonecontrol"
def defaultExcludes = [

        // generated by android
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/Manifest*.*',

        // generated by AndroidAnnotaions
        '**/*_*',
        '**/*InjectAdapter.class',

        // generated by RetroLambda
        '**/*Lambda*.class',
        '**/*$*.*',

        // generated by Dagger
        '**/*ModuleAdapter*.class',

        //generated by Butterknife
        '**/Butterknife*.class',

        // generated by Realm
        '**/Realm*.class'
]
//Copy app/build/spoon/debug/coverage/merged-coverage.ec -> app/build/outputs/code-coverage/connected/coverage.ec
task copyInstrumentationTestCoverageFile(type: Copy) {
    from("${project.buildDir}/spoon/debug/coverage/")
    into("${project.buildDir}/outputs/code-coverage/connected/")
    include('*.ec')
    rename('merged-coverage.ec', 'coverage.ec')
}
project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def buildTypeNameCapitalized = buildTypeName.toString().capitalize()
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = "${buildTypeNameCapitalized}"
                sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeNameCapitalized}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "spoon${sourceName}AndroidTest"

            println("JACOCO: Android Instrumentation Test task name generated: ${testTaskName}")

            def coverageReportingTaskName = "${testTaskName}Coverage"
            println("JACOCO: Instrumentation Test Coverage reporting task name generated: ${coverageReportingTaskName}")

            def jacocoTestExecutorName = "${project.buildDir}/spoon/${sourceName}/coverage/merged-coverage.ec"
//                def jacocoTestExecutorName = "${project.buildDir}/spoon/${sourceName}/coverage/192_168_56_101_5555/coverage.ec"
            println("JACOCO: Instrumentation Test Coverage test execution data defined from: ${jacocoTestExecutorName}")

            def defaultTestCoverageTaskName = "create${sourceName}CoverageReport"
            println("JACOCO: Android Instrumentation Test default coverage report task name generated: ${defaultTestCoverageTaskName}")

            //Reconfigure Gradle task chain for proper instrumentation test coverage reporting
            if (!sourceName.toString().equals("Release")) { //Because there are only Debug instrumentation tests, never Release.
                tasks.each { task ->
                    if (task.name == "${testTaskName}".toString()) {
                        println "JACOCO: $task.name configuring automatic instrumentation test coverage task createDebugCoverageReport upon completion..."
                        task.finalizedBy tasks["copyInstrumentationTestCoverageFile"]
                    } else if (task.name == "copyInstrumentationTestCoverageFile") {
                        println "JACOCO: $task.name configuring automatic spoon test coverage file copy over to default location and wiring task in between spoon and coverage generation tasks..."
                        task.dependsOn tasks["${testTaskName}"]
                        task.finalizedBy tasks["createDebugCoverageReport"]
                    } else if (task.name == "createDebugCoverageReport") {
                        println "JACOCO: $task.name configuring automatic instrumentation test coverage task createDebugCoverageReport to not rely on connectedAndroidTest..."
                        task.dependsOn tasks["copyInstrumentationTestCoverageFile"]
                    } else if (task.name == "connectedDebugAndroidTest") {
                        println "JACOCO: $task.name deleting all actions in this default instrumentation test task since it is so required by jacoco to exist..."
                        task.deleteAllActions()
                        task.doFirst new Action<Task>() {
                            @Override
                            void execute(Task task1) {
                                println("JACOCO has told me to do absolutely nothing for this task ($task1.name), so that is what I am about to do...")
                            }
                        }
                        task.doLast new Action<Task>() {
                            @Override
                            void execute(Task task1) {
                                println("JACOCO has told me to do absolutely nothing for this task ($task1.name), which I am now finished with!  Task complete!")
                            }
                        }
                    }
                }
            }
        }
    }
}


