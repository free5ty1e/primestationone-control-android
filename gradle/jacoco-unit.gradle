apply plugin: 'jacoco'  //Required for gradle to generate automation / instrumentation / UI test coverage report
apply plugin: 'com.vanniktech.android.junit.jacoco' //Required for gradle to generate unit test coverage report
jacoco {
    //Go here to see available tool versions http://www.eclemma.org/jacoco/
    //WARNING: Not all jacoco versions work on Android projects without issues!!  If this one works, you probably shouldn't change it :o
    toolVersion = "0.7.7.201606060606"
}

def snkrsPackageDir = "com/nike/snkrs"
def defaultExcludes = [

        // generated by android
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/Manifest*.*',

        // generated by AndroidAnnotaions
        '**/*_*',
        '**/*InjectAdapter.class',

        // generated by RetroLambda
        '**/*Lambda*.class',
        '**/*$*.*',

        // generated by Dagger
        '**/*ModuleAdapter*.class',

        //generated by Butterknife
        '**/Butterknife*.class',

        // generated by Realm
        '**/Realm*.class'
]

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def buildTypeNameCapitalized = buildTypeName.toString().capitalize()
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = "${buildTypeNameCapitalized}"
                sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeNameCapitalized}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName}UnitTest"

            println("JACOCO: Unit test task name generated: ${testTaskName}")

            def defaultCoverageReportingTaskName = "jacocoTestReport${buildTypeNameCapitalized}" //These are the default tasks that are already generated
            println("JACOCO: Default coverage reporting task name generated: ${defaultCoverageReportingTaskName}")

            def coverageReportingTaskName = "${testTaskName}Coverage"
            println("JACOCO: Coverage reporting task name generated: ${coverageReportingTaskName}")

            // Create coverage task of form 'testFlavorTypeCoverage' depending on the default coverage reporting task name, so that we can overwrite those results.
            //noinspection GroovyAssignabilityCheck
            task "${coverageReportingTaskName}"(
                    type: JacocoReport,
                    dependsOn: "$defaultCoverageReportingTaskName") {
                group = "Reporting"
                description = "Generate Jacoco unit test coverage reports on the ${sourceName} build."
                def taskClassPath = "${project.buildDir}/intermediates/classes/${sourcePath}/${snkrsPackageDir}"

                println("JACOCO: ${testTaskName} Task classpath = ${taskClassPath}")

                classDirectories = fileTree(
                        dir: taskClassPath,
                        excludes: defaultExcludes
                )
                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java/${snkrsPackageDir}"
                ]

                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)

                sourceDirectories.each { sourceDir ->
                    println("JACOCO: ${testTaskName} Task sourceDir += ${sourceDir}")
                }

                def jacocoTestExecutorName = "${project.buildDir}/jacoco/${testTaskName}.exec"

                println("JACOCO: ${testTaskName} Task test executor name = ${jacocoTestExecutorName}")

                executionData = files(jacocoTestExecutorName)
                reports {
                    xml.enabled = true
                    xml.destination = "build/reports/jacoco/${buildTypeName}/jacoco.xml"   //Force overwrite of default coverage report
                    html.enabled = true
                    html.destination = "build/reports/jacoco/${buildTypeName}"  //Force overwrite of default coverage report
                }
                println("project for jacoco unit test reporting: ${project.name}")  //TODO: Figure out if its possible to title the html report something more meaningful than the project name "app" -- so far does not seem possible
            }

            tasks.each { task ->
                if (task.name == "${defaultCoverageReportingTaskName}".toString()) {
                    println "JACOCO: $task.name configuring automatic test coverage task ${coverageReportingTaskName} upon completion..."
                    task.finalizedBy tasks["${coverageReportingTaskName}"]
                }
            }
        }
    }
}


